# Generated by Django 2.1.3 on 2019-12-24 17:50

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=100, null=True)),
                ('about_company', models.TextField(help_text='Enter a brief description of the company.', max_length=1000)),
                ('contact_person', models.CharField(max_length=100, null=True)),
                ('email_1', models.CharField(blank=True, max_length=100, null=True)),
                ('email_2', models.CharField(blank=True, max_length=100, null=True)),
                ('phone_1', models.CharField(blank=True, max_length=100, null=True)),
                ('phone_2', models.CharField(blank=True, max_length=100, null=True)),
                ('facebook', models.CharField(blank=True, max_length=100, null=True)),
                ('twitter', models.CharField(blank=True, max_length=100, null=True)),
                ('website', models.CharField(blank=True, max_length=100, null=True)),
                ('Instagram', models.CharField(blank=True, max_length=100, null=True)),
                ('created_on', models.DateField(blank=True, null=True)),
            ],
            options={
                'ordering': ['company_name', 'contact_person', 'phone_1'],
            },
        ),
        migrations.CreateModel(
            name='Development',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Neighbor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Payment_plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Plot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, null=True)),
                ('description', ckeditor.fields.RichTextField(null=True)),
                ('price', models.IntegerField()),
                ('water', models.CharField(help_text='the distance from water pipe or source', max_length=100, null=True)),
                ('electricity', models.CharField(help_text='distance from the closest transformer', max_length=100)),
                ('photo_main', models.ImageField(upload_to='photos/%Y/%m/%d/')),
                ('photo_1', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('photo_2', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('photo_3', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('photo_4', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('photo_5', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('photo_6', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('is_published', models.BooleanField(default=True)),
                ('list_date', models.DateTimeField(blank=True, null=True)),
                ('company', models.ForeignKey(blank=True, help_text='optional', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.Company')),
                ('development', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.Development')),
                ('location', models.ForeignKey(help_text='add a location closet to the plot in the picked town', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.Location')),
                ('neighbor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.Neighbor')),
                ('payment_plan', models.ForeignKey(help_text='mode of payment required', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.Payment_plan')),
            ],
        ),
        migrations.CreateModel(
            name='Plot_size',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Plot_type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Population',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Realtor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('about_realtor', models.TextField(help_text='Enter a brief description of the Realtor.', max_length=1000)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('phone', models.CharField(blank=True, max_length=100, null=True)),
                ('facebook', models.CharField(blank=True, max_length=100, null=True)),
                ('twitter', models.CharField(blank=True, max_length=100, null=True)),
                ('website', models.CharField(blank=True, max_length=100, null=True)),
                ('Instagram', models.CharField(blank=True, max_length=100, null=True)),
                ('created_on', models.DateField(blank=True, null=True)),
                ('location', models.ManyToManyField(blank=True, help_text='Select The exact Location where this Company  is found in the choosen Town', to='catalog.Location')),
            ],
            options={
                'ordering': ['last_name', 'first_name', 'phone'],
            },
        ),
        migrations.CreateModel(
            name='Road',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Town',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.AddField(
            model_name='realtor',
            name='town',
            field=models.ManyToManyField(blank=True, help_text='Select the town where this realtor is found', to='catalog.Town'),
        ),
        migrations.AddField(
            model_name='plot',
            name='plot_size',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.Plot_size'),
        ),
        migrations.AddField(
            model_name='plot',
            name='plot_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.Plot_type'),
        ),
        migrations.AddField(
            model_name='plot',
            name='population',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.Population'),
        ),
        migrations.AddField(
            model_name='plot',
            name='realtor',
            field=models.ForeignKey(blank=True, help_text='optional', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.Realtor'),
        ),
        migrations.AddField(
            model_name='plot',
            name='roads',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.Road'),
        ),
        migrations.AddField(
            model_name='plot',
            name='town',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.Town'),
        ),
        migrations.AddField(
            model_name='company',
            name='location',
            field=models.ManyToManyField(blank=True, help_text='Select The exact Location where this Company  is found in the choosen Town', to='catalog.Location'),
        ),
        migrations.AddField(
            model_name='company',
            name='town',
            field=models.ManyToManyField(blank=True, help_text='Select The exact Town this company is located.', to='catalog.Town'),
        ),
    ]
